// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract IdentityRegistry {
    struct Identity {
        string name;
        uint256 age;
        address walletAddress;
        bool isRegistered;
    }

    mapping(address => Identity) public identities;

    event IdentityRegistered(address indexed user, string name, uint256 age);

    modifier onlyRegistered() {
        require(identities[msg.sender].isRegistered, "User is not registered");
        _;
    }
 function registerIdentity(string memory _name, uint256 _age) public {
        require(!identities[msg.sender].isRegistered, "Identity is already registered");

        identities[msg.sender] = Identity({
            name: _name,
            age: _age,
            walletAddress: msg.sender,
            isRegistered: true
        });

        emit IdentityRegistered(msg.sender, _name, _age);
    }

}

